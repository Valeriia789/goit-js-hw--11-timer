{"version":3,"sources":["js/timer.js","index.js"],"names":["refs","days","document","querySelector","hours","mins","secs","CountdownTimer","constructor","selector","targetDate","getTimerCountdown","setInterval","deltaTime","Date","now","timerCountdown","getTimeComponents","updateTimer","textContent","time","pad","Math","floor","value","String","padStart"],"mappings":";;;AAAA,MAAMA,EAAO,CACXC,KAAMC,SAASC,cAAc,uBAC7BC,MAAOF,SAASC,cAAc,wBAC9BE,KAAMH,SAASC,cAAc,uBAC7BG,KAAMJ,SAASC,cAAc,wBAG/B,MAAMI,EACJC,aAAa,SAAEC,EAAF,WAAYC,IAClBD,KAAAA,SAAWA,EACXC,KAAAA,WAAaA,EACbC,KAAAA,oBAGPA,oBACEC,YAAY,KACJC,MAAAA,EAAY,KAAKH,WAAaI,KAAKC,MACnCC,EAAiB,KAAKC,kBAAkBJ,GAEzCK,KAAAA,YAAYF,IAChB,KAGLE,aAAa,KAAEjB,EAAF,MAAQG,EAAR,KAAeC,EAAf,KAAqBC,IAC/BN,EAAKC,KAAKkB,eAAiBlB,IAC3BD,EAAKI,MAAMe,eAAiBf,IAC5BJ,EAAKK,KAAKc,eAAiBd,IAC3BL,EAAKM,KAAKa,eAAiBb,IAG9BW,kBAAmBG,GAMV,MAAA,CAAEnB,KALI,KAAKoB,IAAIC,KAAKC,MAAMH,EAAQ,QAK1BhB,MAJD,KAAKiB,IAAIC,KAAKC,MAAOH,EAAQ,MAAyB,OAI9Cf,KAHT,KAAKgB,IAAIC,KAAKC,MAAOH,EAAQ,KAAoB,MAGlCd,KAFf,KAAKe,IAAIC,KAAKC,MAAOH,EAAQ,IAAc,OAK1DC,IAAKG,GACIC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,MAIrC,IAAInB,EAAe,CACjBE,SAAU,WACVC,WAAY,IAAII,KAAK;;AC7CvB,aADA,QAAA,oBACA,QAAA","file":"src.8e2fd764.js","sourceRoot":"../src","sourcesContent":["const refs = {\n  days: document.querySelector('[data-value=\"days\"]'),\n  hours: document.querySelector('[data-value=\"hours\"]'),\n  mins: document.querySelector('[data-value=\"mins\"]'),\n  secs: document.querySelector('[data-value=\"secs\"]'),\n};\n\nclass CountdownTimer {\n  constructor ({ selector, targetDate }) {\n    this.selector = selector;\n    this.targetDate = targetDate;\n    this.getTimerCountdown();\n  }\n\n  getTimerCountdown () {\n    setInterval(() => {\n      const deltaTime = this.targetDate - Date.now();\n      const timerCountdown = this.getTimeComponents(deltaTime);\n\n      this.updateTimer(timerCountdown);\n    }, 1000);\n  }\n\n  updateTimer ({ days, hours, mins, secs }) {\n    (refs.days.textContent = `${days}`),\n    (refs.hours.textContent = `${hours}`),\n    (refs.mins.textContent = `${mins}`),\n    (refs.secs.textContent = `${secs}`);\n  }\n\n  getTimeComponents (time) {\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    return { days, hours, mins, secs };\n  }\n\n  pad (value) {\n    return String(value).padStart(2, '0');\n  }\n}\n\nnew CountdownTimer({\n  selector: '#timer-1',\n  targetDate: new Date('Feb 02, 2022'),\n});\n\n/*\n * Оставшиеся дни: делим значение UTC на 1000 * 60 * 60 * 24, количество\n * миллисекунд в одном дне (миллисекунды * секунды * минуты * часы)\n */\n// const days = Math.floor(time / (1000 * 60 * 60 * 24));\n\n/*\n * Оставшиеся часы: получаем остаток от предыдущего расчета с помощью оператора\n * остатка % и делим его на количество миллисекунд в одном часе\n * (1000 * 60 * 60 = миллисекунды * минуты * секунды)\n */\n// const hours = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n\n/*\n * Оставшиеся минуты: получаем оставшиеся минуты и делим их на количество\n * миллисекунд в одной минуте (1000 * 60 = миллисекунды * секунды)\n */\n// const mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\n\n/*\n * Оставшиеся секунды: получаем оставшиеся секунды и делим их на количество\n * миллисекунд в одной секунде (1000)\n */\n// const secs = Math.floor((time % (1000 * 60)) / 1000);\n","import './sass/main.scss';\nimport './js/timer.js';\n\n"]}